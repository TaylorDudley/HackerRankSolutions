using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution
{

    class SinglyLinkedListNode
    {
        public int data;
        public SinglyLinkedListNode next;

        public SinglyLinkedListNode(int nodeData)
        {
            this.data = nodeData;
            this.next = null;
        }
    }

    class SinglyLinkedList
    {
        public SinglyLinkedListNode head;
        public SinglyLinkedListNode tail;

        public SinglyLinkedList()
        {
            this.head = null;
            this.tail = null;
        }

        public void InsertNode(int nodeData)
        {
            SinglyLinkedListNode node = new SinglyLinkedListNode(nodeData);

            if (this.head == null)
            {
                this.head = node;
            }
            else
            {
                this.tail.next = node;
            }

            this.tail = node;
        }
    }

    static void PrintSinglyLinkedList(SinglyLinkedListNode node, string sep, TextWriter textWriter)
    {
        while (node != null)
        {
            textWriter.Write(node.data);

            node = node.next;

            if (node != null)
            {
                textWriter.Write(sep);
            }
        }
    }

    // Complete the mergeLists function below.

    /*
     * For your reference:
     *
     * SinglyLinkedListNode {
     *     int data;
     *     SinglyLinkedListNode next;
     * }
     *
     */
    static SinglyLinkedListNode mergeLists(SinglyLinkedListNode head1, SinglyLinkedListNode head2)
    {

        // Check if the either of the lists are null, if 1 is null; return the other. If both are null, return null.
        if (head1 == null)
        {
            return head2;
        } else if (head2 == null){
            return head1;
        }

        SinglyLinkedListNode temp;
        SinglyLinkedListNode ans;

        // Sorting the linkedlists
        // if head1 is less than head2, make a new node at head1.data and increment head1. (Do the reverse if head2 >= head1)
        if (head1.data < head2.data)
        {
            temp = ans = new SinglyLinkedListNode(head1.data);
            head1 = head1.next;
        } else
        {
            temp = ans = new SinglyLinkedListNode(head2.data);
            head2 = head2.next;
        }
        
        // Sort through each node until head1 and head2 are null, add each node (with lowest value first) to the temp node.
        while (head1 != null && head2 != null)
        {
            if (head1.data < head2.data)
            {
                temp.next = new SinglyLinkedListNode(head1.data);
                head1 = head1.next;
            }
            else
            {
                temp.next = new SinglyLinkedListNode(head2.data);
                head2 = head2.next;
            }
            temp = temp.next;
        }

        // if there are any remaining values in node 1 or node 2, add it to the end.
        while (head1 != null)
        {
            temp.next = new SinglyLinkedListNode(head1.data);
            head1 = head1.next;
            temp = temp.next;
        }
        while (head2 != null)
        {
            temp.next = new SinglyLinkedListNode(head2.data);
            head2 = head2.next;
            temp = temp.next;
        }
        return ans;
    }

    static void Main(string[] args)
    {
        // Test Input
        SinglyLinkedList llist1 = new SinglyLinkedList();
        llist1.InsertNode(1);
        llist1.InsertNode(3);
        llist1.InsertNode(7);
        SinglyLinkedList llist2 = new SinglyLinkedList();
        llist2.InsertNode(3);
        llist2.InsertNode(4);
        SinglyLinkedListNode llist3 = mergeLists(llist1.head, llist2.head);

    }
}
