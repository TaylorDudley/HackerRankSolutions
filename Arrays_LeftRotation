using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{
    /*
     * Complete the 'rotLeft' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY a
     *  2. INTEGER d
     */
    public static List<int> rotLeft(List<int> a, int d)
    {

        // Create a new list to store the final list
        List<int> ans = new List<int>(a.Count);

        // Iterate through the list from 0 to n - d (This is the first loop)
        for (int i = 0; i < a.Count-d; i++)
        {
            // Add the int at the position of i + d
            ans.Add(a[i + d]);

        }

        // Iterate through the rest of the Array
        for (int i = 0; i < d; i++)
        {
            //Add the first values until a[d - 1]
            ans.Add(a[i]);
        }
        return ans;
    }

}
class Solution
{
    public static void Main(string[] args)
    {
        // Test Input
        int d = 2;
        List<int> a = new List<int>() { 1, 2, 3, 4, 5 };
        List<int> result = Result.rotLeft(a, d);

    }
}
