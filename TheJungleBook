using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;



class Result
{
    /*
     * Complete the 'minimumGroups' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY predators as parameter.
     */

    public static int minimumGroups(List<int> predators)
    {
        // Set the maxGroups as 1. (since first element makes 1 group)
        int maxGroups = 1;
        for (int i = 0; i < predators.Count; i++)
        {
            // temp is temperarily set to i (so the position of predator can be checked based on the next predator)
            int temp = i;

            // counter for the while loop.
            int count = 1;
            while (predators[temp] > -1 && predators[temp] < predators.Count && count < predators.Count)
            {
                temp = predators[temp];
                count++;
            }

            // only increment maxGroups if counter is greater than maxGroups
            if (count > maxGroups)
                maxGroups = count;
        }
        return maxGroups;
    }
}
class Solution
{
    public static void Main(string[] args)
    {
        // Test Input
        List<int> predators = new List<int>() {-1, 8, 6, 0, 7, 3, 8, 9, -1, 6 };
        int result = Result.minimumGroups(predators);

    }
}
