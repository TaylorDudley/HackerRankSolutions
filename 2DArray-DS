using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{
    /*
     * Complete the 'hourglassSum' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts 2D_INTEGER_ARRAY arr as parameter.
     */

    public static int hourglassSum(List<List<int>> arr)
    {
        // New List of ints to store values
        List<int> ans = new List<int>();

        // Count - 2 to exclude the right 2 and the bottom 2 iterations
        for (int i = 0; i < arr.Count-2; i++)
        {
            for (int j = 0; j < arr.Count-2; j++)
            {
                // This creates an I shape.
                ans.Add(arr[i][j] + arr[i][j+1] + arr[i][j+2] + arr[i+1][j+1] + arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2]);
            }
        }
        // Get the max of the list.
        return ans.Max();
    }
}

class Solution
{
    public static void Main(string[] args)
    {

        // Test Input
        List<List<int>> arr = new List<List<int>>();
        arr.Add(new List<int>() { -1, 1, - 1, 0, 0, 0 });
        arr.Add(new List<int>() { 0, -1, 0, 0, 0, 0 });
        arr.Add(new List<int>() { -1, -1, -1, 0, 0, 0 });
        arr.Add(new List<int>() { 0, - 9, 2, - 4, - 4, 0 });
        arr.Add(new List<int>() { -7, 0, 0, - 2, 0, 0 });
        arr.Add(new List<int>() { 0, 0, - 1, - 2, - 4, 0 });

        int result = Result.hourglassSum(arr);

    }
}
