using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{
    /*
     * Complete the 'jumpingOnClouds' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY c as parameter.
     */

    public static int jumpingOnClouds(List<int> c)
    {
        // Initialized variables for jumps taken, current position in array, and the last cloud position
        int jumps = 0;
        int currentPos = 0;
        int lastCloud = c.Count - 1;

        while (currentPos < lastCloud)
        {
            // The last cloud is always 0 (which means it is safe to jump on) Increment by 1 position. 
            if (currentPos + 1 == lastCloud)
            {
                currentPos++;
            }
            
            // if the position 2 spaces ahead is 0, skip a space and increment 2 spaces in the array.
            else if (c[currentPos + 2] == 0)
            {
                currentPos = currentPos + 2;
                
            // Otherwise, increment once in the array.
            } else
            {
                currentPos++;
            }
            
            // jump once per loop
            jumps++;
        }
        
        return jumps;
    }

}

class Solution
{
    public static void Main(string[] args)
    {
        // Test Array
        List<int> c = new List<int>() { 0, 0, 0, 1, 0, 0 };
        int result = Result.jumpingOnClouds(c);
    }
}
