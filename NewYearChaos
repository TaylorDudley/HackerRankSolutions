using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{
    /*
     * Complete the 'minimumBribes' function below.
     *
     * The function accepts INTEGER_ARRAY q as parameter.
     */

    public static void minimumBribes(List<int> q)
    {

        // Created three variables, num of bribes, flag for chaotic, and the number of iterations for the loop
        int bribes = 0;
        bool isChaotic = false;
        int n = q.Count;
        for (int i = 0; i < n; i++)
        {

            // if q[i] - the position in line is > 2
            // then the rules have been broken, too chaotic to continue.
            if (q[i] - (i + 1) > 2)
            {
                isChaotic = true;
                break;
            }

            // Math.Max is used so that j cannot be less than 0.
            // it basically says, j = either 0 or q[i] - 2 <--- if it is greater than 0
            // This iterates when j < i
            for (int j = Math.Max(0, q[i] - 2); j < i; j++)
                // if the value at q[j] is greater than at q[i], then q[j] must have moved up, so a bribe has occured. 
                if (q[j] > q[i])
                    bribes++;
        }

        // Prints correct output depending on flag
        if (isChaotic)
        {
            Console.WriteLine("Too chaotic");
        }
        else
        {
            Console.WriteLine(bribes);
        }
    }
}

class Solution
{
    public static void Main(string[] args)
    {
            // Test Input
            List<int> q = new List<int>() { 1, 2, 5, 3, 7, 8, 6, 4 };
            Result.minimumBribes(q);

    }
}
